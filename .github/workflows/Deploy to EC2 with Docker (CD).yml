name: Deploy to EC2 with Docker (CD)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      run: |
        echo "-----BEGIN OPENSSH PRIVATE KEY-----
        "Your OPENSSH PRIVATE KEY"
        -----END OPENSSH PRIVATE KEY-----"
        chmod 600 "your .pem"
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Cache pip dependencies
      id: cache-pip
      uses: actions/cache@v3
      with:
        # Run pip cache dir to get the correct cache directory path
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install Python dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Build Docker image
      run: |
        docker build -t "your username"/my-chainlit-app:latest .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: "your username"
        password: "your password"

    - name: Push Docker image
      run: |
        docker push "your username"/my-chainlit-app:latest
    - name: Deploy to EC2
      run: |
        ssh -i "your .pem" -o StrictHostKeyChecking=no ec2-user@ec2ipadress << 'EOF'
          
          # Pull the latest image
          sudo docker pull "your username"/my-chainlit-app:latest

          # Stop and remove any existing container running on port 8000
          container_id=$(sudo docker ps -q --filter "ancestor="your username"/my-chainlit-app:latest")
          if [ -n "$container_id" ]; then
            echo "Updating existing container..."
            sudo docker stop $container_id
            sudo docker rm $container_id
          else
            echo "No existing container found, checking for any container using port 8000..."
            existing_container=$(sudo docker ps -q --filter "publish=8000")
            if [ -n "$existing_container" ]; then
              echo "Stopping and removing the container using port 8000..."
              sudo docker stop $existing_container
              sudo docker rm $existing_container
            fi
          fi
          # Run the new container
          echo "Starting new container..."
          sudo docker run -d -p 8000:8000 "your username"/my-chainlit-app:latest
        EOF
